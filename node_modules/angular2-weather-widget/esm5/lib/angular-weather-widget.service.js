/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { API } from './config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var AngularWeatherWidgetService = /** @class */ (function () {
    function AngularWeatherWidgetService(http) {
        this.http = http;
    }
    /**
     * @param {?} isGeoLocation
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    AngularWeatherWidgetService.prototype.getWeatherDetails = /**
     * @param {?} isGeoLocation
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    function (isGeoLocation, location, APIKEY) {
        if (isGeoLocation) {
            return this.http.get("" + API + location + "&units=imperial&appid=" + APIKEY);
        }
        else {
            return this.http.get(API + "q=" + location + "&units=imperial&appid=" + APIKEY);
        }
    };
    AngularWeatherWidgetService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AngularWeatherWidgetService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ AngularWeatherWidgetService.ngInjectableDef = i0.defineInjectable({ factory: function AngularWeatherWidgetService_Factory() { return new AngularWeatherWidgetService(i0.inject(i1.HttpClient)); }, token: AngularWeatherWidgetService, providedIn: "root" });
    return AngularWeatherWidgetService;
}());
export { AngularWeatherWidgetService };
if (false) {
    /** @type {?} */
    AngularWeatherWidgetService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci13ZWF0aGVyLXdpZGdldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItd2VhdGhlci13aWRnZXQvIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci13ZWF0aGVyLXdpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7QUFFL0I7SUFLRSxxQ0FBbUIsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7Ozs7SUFFeEMsdURBQWlCOzs7Ozs7SUFBakIsVUFBa0IsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNO1FBQy9DLElBQUcsYUFBYSxFQUFDO1lBQ2YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFHLEdBQUcsR0FBRyxRQUFRLDhCQUF5QixNQUFRLENBQUMsQ0FBQztTQUMxRTthQUFJO1lBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxHQUFHLFVBQUssUUFBUSw4QkFBeUIsTUFBUSxDQUFDLENBQUM7U0FDNUU7SUFDSCxDQUFDOztnQkFiRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUxRLFVBQVU7OztzQ0FGbkI7Q0FtQkMsQUFkRCxJQWNDO1NBWFksMkJBQTJCOzs7SUFFMUIsMkNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEFQSSB9IGZyb20gJy4vY29uZmlnJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJXZWF0aGVyV2lkZ2V0U2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgZ2V0V2VhdGhlckRldGFpbHMoaXNHZW9Mb2NhdGlvbiwgbG9jYXRpb24sIEFQSUtFWSkgOiBPYnNlcnZhYmxlIDxhbnk+IHtcclxuICAgIGlmKGlzR2VvTG9jYXRpb24pe1xyXG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHtBUEl9JHtsb2NhdGlvbn0mdW5pdHM9aW1wZXJpYWwmYXBwaWQ9JHtBUElLRVl9YCk7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7QVBJfXE9JHtsb2NhdGlvbn0mdW5pdHM9aW1wZXJpYWwmYXBwaWQ9JHtBUElLRVl9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==