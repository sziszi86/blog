(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('angular2-weather-widget', ['exports', '@angular/core', '@angular/common', '@angular/common/http'], factory) :
    (factory((global['angular2-weather-widget'] = {}),global.ng.core,global.ng.common,global.ng.common.http));
}(this, (function (exports,i0,common,i1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var API = 'https://api.openweathermap.org/data/2.5/weather?';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularWeatherWidgetService = /** @class */ (function () {
        function AngularWeatherWidgetService(http) {
            this.http = http;
        }
        /**
         * @param {?} isGeoLocation
         * @param {?} location
         * @param {?} APIKEY
         * @return {?}
         */
        AngularWeatherWidgetService.prototype.getWeatherDetails = /**
         * @param {?} isGeoLocation
         * @param {?} location
         * @param {?} APIKEY
         * @return {?}
         */
            function (isGeoLocation, location, APIKEY) {
                if (isGeoLocation) {
                    return this.http.get("" + API + location + "&units=imperial&appid=" + APIKEY);
                }
                else {
                    return this.http.get(API + "q=" + location + "&units=imperial&appid=" + APIKEY);
                }
            };
        AngularWeatherWidgetService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AngularWeatherWidgetService.ctorParameters = function () {
            return [
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ AngularWeatherWidgetService.ngInjectableDef = i0.defineInjectable({ factory: function AngularWeatherWidgetService_Factory() { return new AngularWeatherWidgetService(i0.inject(i1.HttpClient)); }, token: AngularWeatherWidgetService, providedIn: "root" });
        return AngularWeatherWidgetService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularWeatherWidgetComponent = /** @class */ (function () {
        function AngularWeatherWidgetComponent(ws) {
            this.ws = ws;
            this.height = 'auto';
            this.width = '425px';
            this.backgroundColor = 'rgb(10 10 111)';
            this.isBoxShadow = true;
            this.borderRadius = '5px';
            this.locationFontSize = '40px';
            this.locationFontColor = '#fff';
            this.status = true;
            this.statusFontColor = '#fff';
            this.statusFontSize = '18px';
            this.temperature = true;
            this.tempratureFontColor = '#fff';
            this.tempratureFontSize = '80px';
            this.weatherImages = true;
            this.weatherImageWidth = '100px';
            this.weatherImageHeight = '100px';
            this.geoLocation = false;
            this.location = '';
            this.isWind = true;
            this.isHumidity = true;
            this.windFontColor = '#fff';
            this.windFontSize = '20px';
            this.humidityFontColor = '#fff';
            this.humidityFontSize = '20px';
            this.isLoading = true;
            this.weatherDetails = {
                location: '',
                weather_descriptions: '',
                temperature: '',
                icon: '',
                wind_speed: '',
                humidity: ''
            };
        }
        /**
         * @return {?}
         */
        AngularWeatherWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.checkLocation();
            };
        /**
         *@description Check whether geolocation or manually added location.
         */
        /**
         * \@description Check whether geolocation or manually added location.
         * @return {?}
         */
        AngularWeatherWidgetComponent.prototype.checkLocation = /**
         * \@description Check whether geolocation or manually added location.
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.geoLocation) {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(( /**
                         * @param {?} position
                         * @return {?}
                         */function (position) {
                            /** @type {?} */
                            var lat = position.coords.latitude;
                            /** @type {?} */
                            var long = position.coords.longitude;
                            _this.location = "lat=" + lat + "&lon=" + long;
                            _this.getWeather(true);
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            console.warn(error.message);
                        }));
                    }
                    else {
                        console.warn("It seems like Geolocation, which is required for this page, is not enabled in your browser.\n        Please use a browser which supports it.");
                    }
                }
                else if (!this.geoLocation && this.location.length < 1) {
                    console.warn('Provide  a valid location');
                }
                else {
                    this.getWeather(false);
                }
            };
        /**
         * @param {?} isGeoLocation
         * @return {?}
         */
        AngularWeatherWidgetComponent.prototype.getWeather = /**
         * @param {?} isGeoLocation
         * @return {?}
         */
            function (isGeoLocation) {
                var _this = this;
                if (this.APIKEY) {
                    this.ws.getWeatherDetails(isGeoLocation, this.location, this.APIKEY).subscribe(( /**
                     * @param {?} response
                     * @return {?}
                     */function (response) {
                        _this.weatherDetails = {
                            location: response.name,
                            weather_descriptions: response.weather[0].description,
                            temperature: response.main.temp,
                            icon: "http://openweathermap.org/img/wn/" + response.weather[0].icon + "@2x.png",
                            wind_speed: response.wind.speed,
                            humidity: response.main.humidity
                        };
                        _this.isLoading = false;
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        console.warn(err.error.error.message);
                    }));
                }
                else {
                    console.warn('Invalid APIKEY');
                }
            };
        AngularWeatherWidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'angular-weather-widget',
                        template: "<div class=\"container\"\r\n  [ngStyle]=\"{ 'width': width , 'height': height, 'background-color': backgroundColor, 'box-shadow': isBoxShadow ? '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' : 'none', 'border-radius': borderRadius }\">\r\n  <span *ngIf=\"!isLoading\">\r\n    <div class=\"location\">\r\n      <p [ngStyle]=\"{'font-size': locationFontSize, 'color': locationFontColor}\">{{weatherDetails?.location}}</p>\r\n    </div>\r\n    <div class=\"status\" *ngIf=\"status\">\r\n      <p [ngStyle]=\"{'color': statusFontColor, 'font-size': statusFontSize}\">{{weatherDetails?.weather_descriptions}}\r\n      </p>\r\n    </div>\r\n    <div class=\"temp\" *ngIf=\"temperature\">\r\n      <p [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temperature}}\u00B0 F\r\n      </p>\r\n      <div class=\"weather-images\" *ngIf=\"weatherImages\">\r\n        <img [ngStyle]=\"{'width': weatherImageWidth, 'height': weatherImageHeight }\" alt=\"weather-icon\"\r\n          src=\"{{weatherDetails?.icon}}\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"details\" *ngIf=\"isWind\">\r\n      <p [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">Wind</p>\r\n      <p class=\"wind\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_speed}} MPH\r\n      </p>\r\n    </div>\r\n    <div class=\"details\" *ngIf=\"isHumidity\">\r\n      <p [ngStyle]=\"{'color': humidityFontColor, 'font-size': humidityFontSize}\">Humidity</p>\r\n      <p class=\"wind\" [ngStyle]=\"{'color': humidityFontColor, 'font-size': humidityFontSize}\">\r\n        {{weatherDetails?.humidity}} %</p>\r\n    </div>\r\n  </span>\r\n  <span *ngIf=\"isLoading\">\r\n    <div class=\"loading\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        style=\"margin: auto; background: none; display: block; shape-rendering: auto;\" width=\"50px\" height=\"50px\"\r\n        viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n        <circle cx=\"50\" cy=\"50\" fill=\"none\" stroke=\"#ffffff\" stroke-width=\"10\" r=\"35\"\r\n          stroke-dasharray=\"164.93361431346415 56.97787143782138\">\r\n          <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" dur=\"1s\"\r\n            values=\"0 50 50;360 50 50\" keyTimes=\"0;1\"></animateTransform>\r\n        </circle>\r\n        <!-- [ldio] generated by https://loading.io/ -->\r\n      </svg>\r\n    </div>\r\n  </span>\r\n</div>\r\n",
                        styles: ["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .temp{display:flex;justify-content:space-between;white-space:nowrap}.container .details{display:flex;margin-bottom:5px}.container .details .wind{padding-left:10px}"]
                    }] }
        ];
        /** @nocollapse */
        AngularWeatherWidgetComponent.ctorParameters = function () {
            return [
                { type: AngularWeatherWidgetService }
            ];
        };
        AngularWeatherWidgetComponent.propDecorators = {
            APIKEY: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            backgroundColor: [{ type: i0.Input }],
            isBoxShadow: [{ type: i0.Input }],
            borderRadius: [{ type: i0.Input }],
            locationFontSize: [{ type: i0.Input }],
            locationFontColor: [{ type: i0.Input }],
            status: [{ type: i0.Input }],
            statusFontColor: [{ type: i0.Input }],
            statusFontSize: [{ type: i0.Input }],
            temperature: [{ type: i0.Input }],
            tempratureFontColor: [{ type: i0.Input }],
            tempratureFontSize: [{ type: i0.Input }],
            weatherImages: [{ type: i0.Input }],
            weatherImageWidth: [{ type: i0.Input }],
            weatherImageHeight: [{ type: i0.Input }],
            geoLocation: [{ type: i0.Input }],
            location: [{ type: i0.Input }],
            isWind: [{ type: i0.Input }],
            isHumidity: [{ type: i0.Input }],
            windFontColor: [{ type: i0.Input }],
            windFontSize: [{ type: i0.Input }],
            humidityFontColor: [{ type: i0.Input }],
            humidityFontSize: [{ type: i0.Input }]
        };
        return AngularWeatherWidgetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularWeatherWidgetModule = /** @class */ (function () {
        function AngularWeatherWidgetModule() {
        }
        AngularWeatherWidgetModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [AngularWeatherWidgetComponent],
                        imports: [
                            common.CommonModule,
                            i1.HttpClientModule
                        ],
                        exports: [AngularWeatherWidgetComponent],
                        providers: [AngularWeatherWidgetService]
                    },] }
        ];
        return AngularWeatherWidgetModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AngularWeatherWidgetService = AngularWeatherWidgetService;
    exports.AngularWeatherWidgetComponent = AngularWeatherWidgetComponent;
    exports.AngularWeatherWidgetModule = AngularWeatherWidgetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular2-weather-widget.umd.js.map