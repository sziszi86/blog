{"version":3,"sources":["ng://angular2-weather-widget/lib/config.ts","ng://angular2-weather-widget/lib/angular-weather-widget.service.ts","ng://angular2-weather-widget/lib/angular-weather-widget.component.ts","ng://angular2-weather-widget/lib/angular-weather-widget.module.ts"],"names":["API","AngularWeatherWidgetService","prototype","getWeatherDetails","isGeoLocation","location","APIKEY","this","http","get","Injectable","args","providedIn","HttpClient","AngularWeatherWidgetComponent","ngOnInit","checkLocation","_this","geoLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","getWeather","error","console","warn","message","length","ws","subscribe","response","weatherDetails","name","weather_descriptions","weather","description","temperature","main","temp","icon","wind_speed","wind","speed","humidity","isLoading","err","Component","selector","template","Input","height","width","backgroundColor","isBoxShadow","borderRadius","locationFontSize","locationFontColor","status","statusFontColor","statusFontSize","tempratureFontColor","tempratureFontSize","weatherImages","weatherImageWidth","weatherImageHeight","isWind","isHumidity","windFontColor","windFontSize","humidityFontColor","humidityFontSize","AngularWeatherWidgetModule","NgModule","declarations","imports","CommonModule","HttpClientModule","exports","providers"],"mappings":"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","sourcesContent":["export const API = 'https://api.openweathermap.org/data/2.5/weather?';\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { API } from './config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularWeatherWidgetService {\r\n\r\n  constructor(public http: HttpClient) { }\r\n\r\n  getWeatherDetails(isGeoLocation, location, APIKEY) : Observable <any> {\r\n    if(isGeoLocation){\r\n      return this.http.get(`${API}${location}&units=imperial&appid=${APIKEY}`);\r\n    }else{\r\n      return this.http.get(`${API}q=${location}&units=imperial&appid=${APIKEY}`);\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\r\n@Component({\r\n  selector: 'angular-weather-widget',\r\n  templateUrl: 'angular-weather-widget.component.html',\r\n  styleUrls: ['angular-weather-widget.component.scss']\r\n})\r\nexport class AngularWeatherWidgetComponent implements OnInit {\r\n  @Input() APIKEY: any;\r\n  @Input() height: string = 'auto';\r\n  @Input() width: string = '425px';\r\n  @Input() backgroundColor: string = 'rgb(10 10 111)';\r\n  @Input() isBoxShadow: boolean = true;\r\n  @Input() borderRadius: string = '5px';\r\n  @Input() locationFontSize: string = '40px';\r\n  @Input() locationFontColor: string = '#fff';\r\n  @Input() status: boolean = true;\r\n  @Input() statusFontColor: string = '#fff';\r\n  @Input() statusFontSize: String = '18px';\r\n  @Input() temperature: Boolean = true;\r\n  @Input() tempratureFontColor: string = '#fff';\r\n  @Input() tempratureFontSize: string = '80px';\r\n  @Input() weatherImages: boolean = true;\r\n  @Input() weatherImageWidth: string = '100px';\r\n  @Input() weatherImageHeight: string = '100px';\r\n  @Input() geoLocation: boolean = false;\r\n  @Input() location: any = '';\r\n  @Input() isWind: boolean = true;\r\n  @Input() isHumidity: boolean = true;\r\n  @Input() windFontColor: string = '#fff';\r\n  @Input() windFontSize: string = '20px';\r\n  @Input() humidityFontColor: string = '#fff';\r\n  @Input() humidityFontSize: string = '20px';\r\n  isLoading: boolean = true;\r\n  weatherDetails = {\r\n    location : '',\r\n    weather_descriptions: '',\r\n    temperature: '',\r\n    icon: '',\r\n    wind_speed: '',\r\n    humidity: ''\r\n  };\r\n  constructor(public ws: AngularWeatherWidgetService) { }\r\n\r\n  ngOnInit() {\r\n    this.checkLocation();\r\n  }\r\n\r\n  /**\r\n   *@description Check whether geolocation or manually added location.\r\n   */\r\n\r\n  checkLocation() {\r\n    if (this.geoLocation) {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          var lat = position.coords.latitude;\r\n          var long = position.coords.longitude;\r\n          this.location = `lat=${lat}&lon=${long}`;\r\n          this.getWeather(true);\r\n        }, (error) => {\r\n          console.warn(error.message);\r\n        });\r\n      } else {\r\n        console.warn(`It seems like Geolocation, which is required for this page, is not enabled in your browser.\r\n        Please use a browser which supports it.`);\r\n      }\r\n    } else if (!this.geoLocation && this.location.length < 1) {\r\n      console.warn('Provide  a valid location');\r\n    } else {\r\n      this.getWeather(false);\r\n    }\r\n  }\r\n\r\n  getWeather(isGeoLocation) {\r\n    if (this.APIKEY) {\r\n      this.ws.getWeatherDetails(isGeoLocation,this.location, this.APIKEY).subscribe(response => {\r\n        this.weatherDetails = {\r\n          location : response.name,\r\n          weather_descriptions: response.weather[0].description,\r\n          temperature: response.main.temp,\r\n          icon: `http://openweathermap.org/img/wn/${response.weather[0].icon}@2x.png`,\r\n          wind_speed: response.wind.speed,\r\n          humidity: response.main.humidity\r\n        };\r\n        this.isLoading = false;\r\n      }, err => {\r\n        console.warn(err.error.error.message);\r\n      })\r\n    } else {\r\n      console.warn('Invalid APIKEY');\r\n    }\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { AngularWeatherWidgetComponent } from './angular-weather-widget.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [AngularWeatherWidgetComponent],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  exports: [AngularWeatherWidgetComponent],\r\n  providers: [AngularWeatherWidgetService]\r\n})\r\nexport class AngularWeatherWidgetModule { }\r\n"]}