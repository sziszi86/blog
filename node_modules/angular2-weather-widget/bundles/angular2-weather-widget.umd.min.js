!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/common/http")):"function"==typeof define&&define.amd?define("angular2-weather-widget",["exports","@angular/core","@angular/common","@angular/common/http"],e):e(t["angular2-weather-widget"]={},t.ng.core,t.ng.common,t.ng.common.http)}(this,function(t,e,n,i){"use strict";var o="https://api.openweathermap.org/data/2.5/weather?",r=(a.prototype.getWeatherDetails=function(t,e,n){return t?this.http.get(o+e+"&units=imperial&appid="+n):this.http.get(o+"q="+e+"&units=imperial&appid="+n)},a.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],a.ctorParameters=function(){return[{type:i.HttpClient}]},a.ngInjectableDef=e.defineInjectable({factory:function(){return new a(e.inject(i.HttpClient))},token:a,providedIn:"root"}),a);function a(t){this.http=t}var s=(p.prototype.ngOnInit=function(){this.checkLocation()},p.prototype.checkLocation=function(){var i=this;this.geoLocation?navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){var e=t.coords.latitude,n=t.coords.longitude;i.location="lat="+e+"&lon="+n,i.getWeather(!0)},function(t){console.warn(t.message)}):console.warn("It seems like Geolocation, which is required for this page, is not enabled in your browser.\n        Please use a browser which supports it."):!this.geoLocation&&this.location.length<1?console.warn("Provide  a valid location"):this.getWeather(!1)},p.prototype.getWeather=function(t){var e=this;this.APIKEY?this.ws.getWeatherDetails(t,this.location,this.APIKEY).subscribe(function(t){e.weatherDetails={location:t.name,weather_descriptions:t.weather[0].description,temperature:t.main.temp,icon:"http://openweathermap.org/img/wn/"+t.weather[0].icon+"@2x.png",wind_speed:t.wind.speed,humidity:t.main.humidity},e.isLoading=!1},function(t){console.warn(t.error.error.message)}):console.warn("Invalid APIKEY")},p.decorators=[{type:e.Component,args:[{selector:"angular-weather-widget",template:'<div class="container"\r\n  [ngStyle]="{ \'width\': width , \'height\': height, \'background-color\': backgroundColor, \'box-shadow\': isBoxShadow ? \'0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\' : \'none\', \'border-radius\': borderRadius }">\r\n  <span *ngIf="!isLoading">\r\n    <div class="location">\r\n      <p [ngStyle]="{\'font-size\': locationFontSize, \'color\': locationFontColor}">{{weatherDetails?.location}}</p>\r\n    </div>\r\n    <div class="status" *ngIf="status">\r\n      <p [ngStyle]="{\'color\': statusFontColor, \'font-size\': statusFontSize}">{{weatherDetails?.weather_descriptions}}\r\n      </p>\r\n    </div>\r\n    <div class="temp" *ngIf="temperature">\r\n      <p [ngStyle]="{\'color\': tempratureFontColor, \'font-size\': tempratureFontSize}">{{weatherDetails?.temperature}}Â° F\r\n      </p>\r\n      <div class="weather-images" *ngIf="weatherImages">\r\n        <img [ngStyle]="{\'width\': weatherImageWidth, \'height\': weatherImageHeight }" alt="weather-icon"\r\n          src="{{weatherDetails?.icon}}" />\r\n      </div>\r\n    </div>\r\n    <div class="details" *ngIf="isWind">\r\n      <p [ngStyle]="{\'color\': windFontColor, \'font-size\': windFontSize}">Wind</p>\r\n      <p class="wind" [ngStyle]="{\'color\': windFontColor, \'font-size\': windFontSize}">{{weatherDetails?.wind_speed}} MPH\r\n      </p>\r\n    </div>\r\n    <div class="details" *ngIf="isHumidity">\r\n      <p [ngStyle]="{\'color\': humidityFontColor, \'font-size\': humidityFontSize}">Humidity</p>\r\n      <p class="wind" [ngStyle]="{\'color\': humidityFontColor, \'font-size\': humidityFontSize}">\r\n        {{weatherDetails?.humidity}} %</p>\r\n    </div>\r\n  </span>\r\n  <span *ngIf="isLoading">\r\n    <div class="loading">\r\n      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"\r\n        style="margin: auto; background: none; display: block; shape-rendering: auto;" width="50px" height="50px"\r\n        viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">\r\n        <circle cx="50" cy="50" fill="none" stroke="#ffffff" stroke-width="10" r="35"\r\n          stroke-dasharray="164.93361431346415 56.97787143782138">\r\n          <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s"\r\n            values="0 50 50;360 50 50" keyTimes="0;1"></animateTransform>\r\n        </circle>\r\n        \x3c!-- [ldio] generated by https://loading.io/ --\x3e\r\n      </svg>\r\n    </div>\r\n  </span>\r\n</div>\r\n',styles:["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .temp{display:flex;justify-content:space-between;white-space:nowrap}.container .details{display:flex;margin-bottom:5px}.container .details .wind{padding-left:10px}"]}]}],p.ctorParameters=function(){return[{type:r}]},p.propDecorators={APIKEY:[{type:e.Input}],height:[{type:e.Input}],width:[{type:e.Input}],backgroundColor:[{type:e.Input}],isBoxShadow:[{type:e.Input}],borderRadius:[{type:e.Input}],locationFontSize:[{type:e.Input}],locationFontColor:[{type:e.Input}],status:[{type:e.Input}],statusFontColor:[{type:e.Input}],statusFontSize:[{type:e.Input}],temperature:[{type:e.Input}],tempratureFontColor:[{type:e.Input}],tempratureFontSize:[{type:e.Input}],weatherImages:[{type:e.Input}],weatherImageWidth:[{type:e.Input}],weatherImageHeight:[{type:e.Input}],geoLocation:[{type:e.Input}],location:[{type:e.Input}],isWind:[{type:e.Input}],isHumidity:[{type:e.Input}],windFontColor:[{type:e.Input}],windFontSize:[{type:e.Input}],humidityFontColor:[{type:e.Input}],humidityFontSize:[{type:e.Input}]},p);function p(t){this.ws=t,this.height="auto",this.width="425px",this.backgroundColor="rgb(10 10 111)",this.isBoxShadow=!0,this.borderRadius="5px",this.locationFontSize="40px",this.locationFontColor="#fff",this.status=!0,this.statusFontColor="#fff",this.statusFontSize="18px",this.temperature=!0,this.tempratureFontColor="#fff",this.tempratureFontSize="80px",this.weatherImages=!0,this.weatherImageWidth="100px",this.weatherImageHeight="100px",this.geoLocation=!1,this.location="",this.isWind=!0,this.isHumidity=!0,this.windFontColor="#fff",this.windFontSize="20px",this.humidityFontColor="#fff",this.humidityFontSize="20px",this.isLoading=!0,this.weatherDetails={location:"",weather_descriptions:"",temperature:"",icon:"",wind_speed:"",humidity:""}}var d=(l.decorators=[{type:e.NgModule,args:[{declarations:[s],imports:[n.CommonModule,i.HttpClientModule],exports:[s],providers:[r]}]}],l);function l(){}t.AngularWeatherWidgetService=r,t.AngularWeatherWidgetComponent=s,t.AngularWeatherWidgetModule=d,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=angular2-weather-widget.umd.min.js.map