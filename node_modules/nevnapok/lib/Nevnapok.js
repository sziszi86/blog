"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var es6_promise_1 = tslib_1.__importDefault(require("es6-promise"));
es6_promise_1.default.polyfill();
require("isomorphic-fetch");
/**
* @api public
*/
var Client = /** @class */ (function () {
    function Client(opts) {
        if (opts === void 0) { opts = {}; }
        this.apiUrl = opts.apiUrl || 'https://api.nevnapok.eu';
    }
    /**
     * _get - Internal function to process GET requests
     * @param {string} endpoint - The endpoint to attach to the API URL
     */
    Client.prototype._get = function (endpoint) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return fetch(_this.apiUrl + "/" + endpoint, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
                .then(function (res) { return res.json(); })
                .then(function (json) {
                var keys = Object.keys(json);
                return keys.length
                    ? resolve(json[keys[0]])
                    : resolve(null);
            })
                .catch(reject);
        });
    };
    /**
     * today - Getting namedays on the current day
     */
    Client.prototype.today = function () {
        return this._get('ma');
    };
    /**
     * on - Getting namedays on a specific date
     * @param {number} month - The number of the month (1-12)
     * @param {number} day - The number of the day (1-31)
     */
    Client.prototype.on = function (month, day) {
        if (month < 1 || month > 12) {
            throw new Error('nevnapok.js: Invalid month provided to the on() function.');
        }
        if (day < 0 || day > 31) {
            throw new Error('nevnapok.js: Invalid day provided to the on() function.');
        }
        var monthDayString = (month < 10 ? "0" + month : month)
            + '-'
            + (day < 10 ? "0" + day : day);
        return this._get("nap/" + monthDayString);
    };
    /**
     * of - Getting namedays of a specific name
     * @param {string} name - The name to search for
     */
    Client.prototype.of = function (name) {
        name = encodeURIComponent(name);
        return this._get("nev/" + name);
    };
    return Client;
}());
exports.Client = Client;
